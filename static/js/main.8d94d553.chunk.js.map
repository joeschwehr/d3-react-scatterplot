{"version":3,"sources":["D3Chart.js","ChartWrapper.js","Table.js","App.js","serviceWorker.js","index.js"],"names":["MARGIN","WIDTH","HEIGHT","D3Chart","element","dataFromProps","handleClick","vis","this","g","d3","append","attr","x","range","y","text","xAxisGroup","yAxisGroup","update","data","domain","d","Number","age","height","xAxisCall","yAxisCall","transition","duration","call","circles","selectAll","exit","remove","enter","on","id","ChartWrapper","setState","chart","refs","props","circleClicked","nextProps","state","className","ref","Component","Table","name","outputData","map","person","bgColor","clickedCircle","Row","key","style","backgroundColor","Col","xs","Button","variant","type","width","onClick","handleRemove","handleChange","e","target","value","handleAdd","Form","Control","placeholder","onChange","App","filteredData","filter","newUser","uuid","newData","activeId","json","then","record","catch","err","console","log","length","Navbar","bg","Brand","Container","md","renderChart","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8d94d553.chunk.js","sourcesContent":["import * as d3 from 'd3';\n\nconst MARGIN = { TOP: 10, BOTTOM: 80, LEFT: 55, RIGHT: 10 };\nconst WIDTH = 600 - MARGIN.LEFT - MARGIN.RIGHT;\nconst HEIGHT = 500 - MARGIN.TOP - MARGIN.BOTTOM;\n\nclass D3Chart {\n    constructor(element, dataFromProps, handleClick) {\n        let vis = this;\n\n        // SVG & G\n        vis.g = d3\n            .select(element)\n            .append('svg')\n            .attr('width', WIDTH + MARGIN.LEFT + MARGIN.RIGHT)\n            .attr('height', HEIGHT + MARGIN.TOP + MARGIN.BOTTOM)\n            .append('g')\n            .attr('transform', `translate(${MARGIN.LEFT}, ${MARGIN.TOP})`);\n\n        // SCALES\n        vis.x = d3.scaleLinear().range([0, WIDTH]);\n        vis.y = d3.scaleLinear().range([HEIGHT, 0]);\n\n        // X LABEL\n        vis.g\n            .append('text')\n            .attr('x', WIDTH / 2)\n            .attr('y', HEIGHT + 40)\n            .attr('text-anchor', 'middle')\n            .text('Age');\n\n        // Y LABEL\n        vis.g\n            .append('text')\n            .attr('x', -HEIGHT / 2)\n            .attr('y', -40)\n            .attr('transform', `rotate(-90)`)\n            .attr('text-anchor', 'middle')\n            .text('Height');\n\n        // Axis\n        vis.xAxisGroup = vis.g.append('g').attr('transform', `translate(0, ${HEIGHT})`);\n        vis.yAxisGroup = vis.g.append('g');\n\n        vis.update(dataFromProps, handleClick);\n    }\n\n    update(dataFromProps, handleClick) {\n        let vis = this;\n        vis.data = dataFromProps;\n\n        // ADJUST SCALES\n        vis.x.domain([0, d3.max(vis.data, d => Number(d.age)) + 2]);\n        vis.y.domain([0, d3.max(vis.data, d => Number(d.height)) + 10]);\n\n        // AXIS CALL\n        vis.xAxisCall = d3.axisBottom(vis.x);\n        vis.yAxisCall = d3.axisLeft(vis.y);\n        // Generate axes once scales have been set\n        vis.xAxisGroup\n            .transition()\n            .duration(500)\n            .call(this.xAxisCall);\n        vis.yAxisGroup\n            .transition()\n            .duration(500)\n            .call(this.yAxisCall);\n\n        // JOIN\n        const circles = vis.g.selectAll('circle').data(vis.data);\n\n        // EXIT\n        circles\n            .exit()\n            .transition()\n            .duration(1000)\n            .attr('r', '0')\n            .attr('cy', d => vis.y(d.height * 0.95))\n            .attr('opacity', 0)\n            .remove();\n\n        // UPDATE THE STUFF STAYING ON THE SCREEN\n        circles\n            .attr('r', 8)\n            .attr('fill', 'rgba(0, 111, 111, .8)')\n            .attr('stroke', 'rgba(222,222,222,.3)')\n            .attr('stroke-width', 2)\n            .transition()\n            .duration(1000)\n            .attr('cx', d => vis.x(d.age))\n            .attr('cy', d => vis.y(d.height));\n\n        // ENTER\n        circles\n            .enter()\n            .append('circle')\n            .attr('opacity', 1)\n            .attr('cx', d => vis.x(d.age))\n            .attr('cy', d => vis.y(d.height))\n            .attr('fill', 'rgba(0, 111, 111, .8)')\n            .attr('stroke', 'rgba(222,222,222,.3)')\n            .attr('stroke-width', 2)\n            .on('click', d => handleClick(d.id))\n            .transition()\n            .duration(1000)\n            .attr('r', 8);\n    }\n}\n\nexport default D3Chart;\n","import React, { Component } from 'react';\nimport D3Chart from './D3Chart';\n\nexport default class ChartWrapper extends Component {\n    componentDidMount() {\n        this.setState({\n            chart: new D3Chart(this.refs.chart, this.props.dataFromProps, this.props.circleClicked)\n        });\n    }\n\n    shouldComponentUpdate() {\n        return false;\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.state.chart.update(nextProps.dataFromProps);\n    }\n\n    render() {\n        return <div className='chart-area' ref='chart'></div>;\n    }\n}\n","import React, { Component } from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport './table.css';\n\nexport default class Table extends Component {\n    state = {\n        name: '',\n        height: '',\n        age: ''\n    };\n\n    outputData = () => {\n        return this.props.data.map(person => {\n            const bgColor = person.id === this.props.clickedCircle ? 'yellow' : 'white';\n            return (\n                <Row key={person.id} className='person-row' style={{ backgroundColor: bgColor }}>\n                    <Col xs={3}>{person.name}</Col>\n                    <Col xs={3}>{person.age}</Col>\n                    <Col xs={3}>{person.height}</Col>\n                    <Col xs={3}>\n                        <Button\n                            variant={'danger'}\n                            type={'button'}\n                            style={{ width: '100%' }}\n                            id={person.id}\n                            onClick={this.props.handleRemove}\n                        >\n                            Remove\n                        </Button>\n                    </Col>\n                </Row>\n            );\n        });\n    };\n\n    handleChange = e => {\n        this.setState({ [e.target.name]: e.target.value });\n    };\n\n    handleClick = () => {\n        if (this.state.name === '' || this.state.age === '' || this.state.height === '') return;\n        this.props.handleAdd(this.state);\n        this.setState({ name: '', age: '', height: '' });\n    };\n\n    render() {\n        return (\n            <div>\n                <Row>\n                    <Col xs={3}>\n                        <Form.Control\n                            type='text'\n                            placeholder='Name'\n                            name='name'\n                            value={this.state.name}\n                            onChange={this.handleChange}\n                        />\n                    </Col>\n                    <Col xs={3}>\n                        <Form.Control\n                            type='number'\n                            placeholder='Age'\n                            name='age'\n                            value={this.state.age}\n                            onChange={this.handleChange}\n                        />\n                    </Col>\n                    <Col xs={3}>\n                        <Form.Control\n                            type='number'\n                            placeholder='Height'\n                            name='height'\n                            value={this.state.height}\n                            onChange={this.handleChange}\n                        />\n                    </Col>\n                    <Col xs={3}>\n                        <Button\n                            variant={'primary'}\n                            type={'button'}\n                            style={{ width: '100%' }}\n                            onClick={this.handleClick}\n                        >\n                            Add\n                        </Button>\n                    </Col>\n                </Row>\n                {this.outputData()}\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { json } from 'd3';\nimport uuid from 'uuid/v4';\n\nimport ChartWrapper from './ChartWrapper';\nimport Table from './Table';\n\nclass App extends Component {\n    state = {\n        data: [],\n        clickedCircle: null\n    };\n\n    componentWillMount() {\n        json('https://udemy-react-d3.firebaseio.com/children.json')\n            .then(data => {\n                data = data.map(record => {\n                    return { ...record, id: uuid() };\n                });\n                this.setState({ data });\n            })\n            .catch(err => console.log(err));\n    }\n\n    renderChart() {\n        if (this.state.data.length === 0) {\n            return 'loading data...';\n        } else {\n            return (\n                <ChartWrapper dataFromProps={this.state.data} circleClicked={this.circleClicked} />\n            );\n        }\n    }\n\n    handleRemove = e => {\n        const filteredData = this.state.data.filter(person => person.id !== e.target.id);\n        this.setState({ data: filteredData });\n    };\n\n    handleAdd = newUser => {\n        newUser = { ...newUser, id: uuid() };\n        const newData = [...this.state.data, newUser];\n        this.setState({ data: newData });\n    };\n\n    circleClicked = activeId => {\n        this.setState({ clickedCircle: activeId });\n    };\n\n    render() {\n        return (\n            <div>\n                <Navbar bg='light'>\n                    <Navbar.Brand>Scatterplotly</Navbar.Brand>\n                </Navbar>\n                <Container>\n                    <Row>\n                        <Col md={6} xs={12} id='chart-div'>\n                            {this.renderChart()}\n                        </Col>\n                        <Col md={6} xs={12} id='table-div'>\n                            <Table\n                                data={this.state.data}\n                                handleRemove={this.handleRemove}\n                                handleAdd={this.handleAdd}\n                                clickedCircle={this.state.clickedCircle}\n                            />\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}